
Graduation_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000bde  00000c72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007a  0080007a  00000c8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001110  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b96  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000816  00000000  00000000  00003e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  8a:	0c 94 ed 05 	jmp	0xbda	; 0xbda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:
#include "ADC.h"
#include <util/delay.h>

void ADC_INIT()
{
	SETBIT(ADMUX,REFS0);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	SETBIT(ADCSRA,ADEN);
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS0);
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	86 b9       	out	0x06, r24	; 6
  a4:	08 95       	ret

000000a6 <ADC_Read>:
}
int ADC_Read(int Channel)
{
	int x =0;
	if (Channel<8)
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	91 05       	cpc	r25, r1
  aa:	ac f4       	brge	.+42     	; 0xd6 <ADC_Read+0x30>
	{
		ADMUX =(ADMUX &0xE0) | Channel;
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	90 7e       	andi	r25, 0xE0	; 224
  b0:	89 2b       	or	r24, r25
  b2:	87 b9       	out	0x07, r24	; 7
		SETBIT(ADCSRA,ADSC);
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	86 b9       	out	0x06, r24	; 6
		while(READBIT(ADCSRA,ADIF)==0){;}
  ba:	34 9b       	sbis	0x06, 4	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <ADC_Read+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <ADC_Read+0x1a>
  c4:	00 00       	nop
		_delay_us(10);
		x= (int)ADCL+(int) ADCH *256 ;
  c6:	24 b1       	in	r18, 0x04	; 4
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	98 2f       	mov	r25, r24
  ce:	88 27       	eor	r24, r24
  d0:	82 0f       	add	r24, r18
  d2:	91 1d       	adc	r25, r1
  d4:	08 95       	ret
	SETBIT(ADCSRA,ADEN);
	SETBIT(ADCSRA,ADPS0);
}
int ADC_Read(int Channel)
{
	int x =0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
		while(READBIT(ADCSRA,ADIF)==0){;}
		_delay_us(10);
		x= (int)ADCL+(int) ADCH *256 ;
	}
	return x;
  da:	08 95       	ret

000000dc <Write_EEPROM>:
#include "STD_Macros.h"
#include "I2C.h"


void Write_EEPROM(char data,char page , char line)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	c8 2f       	mov	r28, r24
  e2:	d4 2f       	mov	r29, r20
	char address=(0xA<<4) | (page<<1);
  e4:	86 2f       	mov	r24, r22
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
	I2C_Start(address);
  ec:	80 6a       	ori	r24, 0xA0	; 160
  ee:	0e 94 a1 00 	call	0x142	; 0x142 <I2C_Start>
	I2C_Write(line);
  f2:	8d 2f       	mov	r24, r29
  f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Write>
	I2C_Write(data);
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Write>
	I2C_Stop();
  fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Stop>
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <Read_EEPROM>:

char Read_EEPROM(char page , char line)
{
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	16 2f       	mov	r17, r22
	char data=0;
	char address=(0xA<<4) | (page<<1);
 110:	c8 2f       	mov	r28, r24
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	cc 0f       	add	r28, r28
 116:	dd 1f       	adc	r29, r29
	I2C_Start(address);
 118:	8c 2f       	mov	r24, r28
 11a:	80 6a       	ori	r24, 0xA0	; 160
 11c:	0e 94 a1 00 	call	0x142	; 0x142 <I2C_Start>
	I2C_Write(line);
 120:	81 2f       	mov	r24, r17
 122:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Write>
	I2C_Repeated_Start(address | 0x01);
 126:	8c 2f       	mov	r24, r28
 128:	81 6a       	ori	r24, 0xA1	; 161
 12a:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Repeated_Start>
	data =I2C_Read_Ack();
 12e:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Read_Ack>
 132:	c8 2f       	mov	r28, r24
	I2C_Stop();
 134:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Stop>
	return data;
 138:	8c 2f       	mov	r24, r28
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <I2C_Start>:
char I2C_Read_Nack()		
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;				/* Return received data */
}
 142:	94 ea       	ldi	r25, 0xA4	; 164
 144:	96 bf       	out	0x36, r25	; 54
 146:	06 b6       	in	r0, 0x36	; 54
 148:	07 fe       	sbrs	r0, 7
 14a:	fd cf       	rjmp	.-6      	; 0x146 <I2C_Start+0x4>
 14c:	91 b1       	in	r25, 0x01	; 1
 14e:	98 7f       	andi	r25, 0xF8	; 248
 150:	98 30       	cpi	r25, 0x08	; 8
 152:	71 f4       	brne	.+28     	; 0x170 <I2C_Start+0x2e>
 154:	83 b9       	out	0x03, r24	; 3
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	86 bf       	out	0x36, r24	; 54
 15a:	06 b6       	in	r0, 0x36	; 54
 15c:	07 fe       	sbrs	r0, 7
 15e:	fd cf       	rjmp	.-6      	; 0x15a <I2C_Start+0x18>
 160:	81 b1       	in	r24, 0x01	; 1
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	88 31       	cpi	r24, 0x18	; 24
 166:	31 f0       	breq	.+12     	; 0x174 <I2C_Start+0x32>
 168:	80 32       	cpi	r24, 0x20	; 32
 16a:	31 f4       	brne	.+12     	; 0x178 <I2C_Start+0x36>
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	08 95       	ret
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	08 95       	ret

0000017c <I2C_Repeated_Start>:
 17c:	94 ea       	ldi	r25, 0xA4	; 164
 17e:	96 bf       	out	0x36, r25	; 54
 180:	06 b6       	in	r0, 0x36	; 54
 182:	07 fe       	sbrs	r0, 7
 184:	fd cf       	rjmp	.-6      	; 0x180 <I2C_Repeated_Start+0x4>
 186:	91 b1       	in	r25, 0x01	; 1
 188:	98 7f       	andi	r25, 0xF8	; 248
 18a:	90 31       	cpi	r25, 0x10	; 16
 18c:	71 f4       	brne	.+28     	; 0x1aa <I2C_Repeated_Start+0x2e>
 18e:	83 b9       	out	0x03, r24	; 3
 190:	84 e8       	ldi	r24, 0x84	; 132
 192:	86 bf       	out	0x36, r24	; 54
 194:	06 b6       	in	r0, 0x36	; 54
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <I2C_Repeated_Start+0x18>
 19a:	81 b1       	in	r24, 0x01	; 1
 19c:	88 7f       	andi	r24, 0xF8	; 248
 19e:	80 34       	cpi	r24, 0x40	; 64
 1a0:	31 f0       	breq	.+12     	; 0x1ae <I2C_Repeated_Start+0x32>
 1a2:	88 34       	cpi	r24, 0x48	; 72
 1a4:	31 f4       	brne	.+12     	; 0x1b2 <I2C_Repeated_Start+0x36>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	08 95       	ret
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	08 95       	ret

000001b6 <I2C_Write>:
 1b6:	83 b9       	out	0x03, r24	; 3
 1b8:	84 e8       	ldi	r24, 0x84	; 132
 1ba:	86 bf       	out	0x36, r24	; 54
 1bc:	06 b6       	in	r0, 0x36	; 54
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <I2C_Write+0x6>
 1c2:	81 b1       	in	r24, 0x01	; 1
 1c4:	88 7f       	andi	r24, 0xF8	; 248
 1c6:	88 32       	cpi	r24, 0x28	; 40
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <I2C_Write+0x1c>
 1ca:	80 33       	cpi	r24, 0x30	; 48
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <I2C_Write+0x20>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	08 95       	ret
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	08 95       	ret

000001da <I2C_Read_Ack>:
 1da:	84 ec       	ldi	r24, 0xC4	; 196
 1dc:	86 bf       	out	0x36, r24	; 54
 1de:	06 b6       	in	r0, 0x36	; 54
 1e0:	07 fe       	sbrs	r0, 7
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <I2C_Read_Ack+0x4>
 1e4:	83 b1       	in	r24, 0x03	; 3
 1e6:	08 95       	ret

000001e8 <I2C_Stop>:
void I2C_Stop()								/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);	/* Enable TWI, generate stop */
 1e8:	84 e9       	ldi	r24, 0x94	; 148
 1ea:	86 bf       	out	0x36, r24	; 54
	while(TWCR&(1<<TWSTO));					/* Wait until stop condition execution */
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	04 fc       	sbrc	r0, 4
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <I2C_Stop+0x4>
}
 1f2:	08 95       	ret

000001f4 <INT1_INIT>:
void INT0_INIT()
{
	sei();
	SETBIT(MCUCR,ISC01);
	SETBIT(GICR,INT0);
	CLEARBIT(DDRD,2);
 1f4:	85 b7       	in	r24, 0x35	; 53
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	85 bf       	out	0x35, r24	; 53
 1fa:	85 b7       	in	r24, 0x35	; 53
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	85 bf       	out	0x35, r24	; 53
 200:	78 94       	sei
 202:	8b b7       	in	r24, 0x3b	; 59
 204:	80 68       	ori	r24, 0x80	; 128
 206:	8b bf       	out	0x3b, r24	; 59
 208:	81 b3       	in	r24, 0x11	; 17
 20a:	87 7f       	andi	r24, 0xF7	; 247
 20c:	81 bb       	out	0x11, r24	; 17
 20e:	08 95       	ret

00000210 <__vector_1>:
}

ISR(INT0_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
	//
}
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_2>:

ISR(INT1_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	Systemflag^=1;
 246:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	89 27       	eor	r24, r25
 24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	if(Systemflag)
 252:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 256:	88 23       	and	r24, r24
 258:	c9 f0       	breq	.+50     	; 0x28c <__vector_2+0x68>
	{
		TIMER0_INIT(100); //START Timer0
 25a:	84 e6       	ldi	r24, 0x64	; 100
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <TIMER0_INIT>
		ReqTemp=(int)Read_EEPROM(1,1);  //Read required temperature from EEPROM
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 84 00 	call	0x108	; 0x108 <Read_EEPROM>
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 270:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		SS_Init(); //START 7-Seg Display
 274:	0e 94 2f 02 	call	0x45e	; 0x45e <SS_Init>
		// START HEATER and COOLER (LEDS)
		SETBIT(PORTC,7); 
 278:	85 b3       	in	r24, 0x15	; 21
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	85 bb       	out	0x15, r24	; 21
		SETBIT(DDRB,6);
 27e:	87 b3       	in	r24, 0x17	; 23
 280:	80 64       	ori	r24, 0x40	; 64
 282:	87 bb       	out	0x17, r24	; 23
		SETBIT(DDRB,7);
 284:	87 b3       	in	r24, 0x17	; 23
 286:	80 68       	ori	r24, 0x80	; 128
 288:	87 bb       	out	0x17, r24	; 23
 28a:	19 c0       	rjmp	.+50     	; 0x2be <__vector_2+0x9a>
	}
	else
	{
		Write_EEPROM(ReqTemp,1,1); //Write the last required temperature to EEPROM
 28c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 290:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_EEPROM>
		SS_Deinit(); //STOP 7-Seg Display
 29c:	0e 94 36 02 	call	0x46c	; 0x46c <SS_Deinit>
		//STOP TIMERS
		CLEARBIT(TCCR0,CS01);
 2a0:	83 b7       	in	r24, 0x33	; 51
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	83 bf       	out	0x33, r24	; 51
		CLEARBIT(TCCR0,CS00);
 2a6:	83 b7       	in	r24, 0x33	; 51
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	83 bf       	out	0x33, r24	; 51
		// STOP HEATER and COOLER (LEDS)
		CLEARBIT(PORTC,7);
 2ac:	85 b3       	in	r24, 0x15	; 21
 2ae:	8f 77       	andi	r24, 0x7F	; 127
 2b0:	85 bb       	out	0x15, r24	; 21
		CLEARBIT(DDRB,6);
 2b2:	87 b3       	in	r24, 0x17	; 23
 2b4:	8f 7b       	andi	r24, 0xBF	; 191
 2b6:	87 bb       	out	0x17, r24	; 23
		CLEARBIT(DDRB,7);
 2b8:	87 b3       	in	r24, 0x17	; 23
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	87 bb       	out	0x17, r24	; 23
	}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <main>:
#include "EEPROM.h"
#include "SS.h"

int main(void)
{
	ADC_INIT();
 2e0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_INIT>
	INT1_INIT();
 2e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <INT1_INIT>
	//////////////////////////////////////////////////////////////////////////
	//SET PINS FOR INPUT
	CLEARBIT(DDRD,0);
 2e8:	81 b3       	in	r24, 0x11	; 17
 2ea:	8e 7f       	andi	r24, 0xFE	; 254
 2ec:	81 bb       	out	0x11, r24	; 17
	CLEARBIT(DDRD,1);
 2ee:	81 b3       	in	r24, 0x11	; 17
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	81 bb       	out	0x11, r24	; 17
	//SET PORT FOR OUTPUT
	SETBIT(DDRC,7);
 2f4:	84 b3       	in	r24, 0x14	; 20
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	84 bb       	out	0x14, r24	; 20
	
	//////////////////////////////////////////////////////////////////////////
	ReqTemp = 60;				//The initial temperature is 60
 2fa:	8c e3       	ldi	r24, 0x3C	; 60
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 302:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Mode = 2;					//HEATING OR COOLING
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Mode>
	SettingMode = 0;			//IF 1 Setting Mode is active
 30c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <SettingMode>
	//////////////////////////////////////////////////////////////////////////
	
	Write_EEPROM(60,1,1);	//Write Required temp to EEPROM (initially to 60) 
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	8c e3       	ldi	r24, 0x3C	; 60
 316:	0e 94 6e 00 	call	0xdc	; 0xdc <Write_EEPROM>
	
	//////////////////////////////////////////////////////////////////////////
    while (1) 
    {
		if(Systemflag)
 31a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 31e:	88 23       	and	r24, r24
 320:	e1 f3       	breq	.-8      	; 0x31a <main+0x3a>
		{
			writeSS(ActualTemp);
 322:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ActualTemp>
 326:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ActualTemp+0x1>
 32a:	0e 94 3d 02 	call	0x47a	; 0x47a <writeSS>
			if(READBIT(PIND,1)==0 || READBIT(PIND,0)==0)
 32e:	81 9b       	sbis	0x10, 1	; 16
 330:	02 c0       	rjmp	.+4      	; 0x336 <main+0x56>
 332:	80 99       	sbic	0x10, 0	; 16
 334:	62 c0       	rjmp	.+196    	; 0x3fa <main+0x11a>
			{
				SettingMode=1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <SettingMode>
				while(READBIT(PIND,1)==0 || READBIT(PIND,0)==0){;}
 33c:	81 9b       	sbis	0x10, 1	; 16
 33e:	fe cf       	rjmp	.-4      	; 0x33c <main+0x5c>
 340:	80 9b       	sbis	0x10, 0	; 16
 342:	fc cf       	rjmp	.-8      	; 0x33c <main+0x5c>
				count_t2=0;
 344:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <count_t2+0x1>
 348:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <count_t2>
				Timer2_INIT(5000);
 34c:	88 e8       	ldi	r24, 0x88	; 136
 34e:	93 e1       	ldi	r25, 0x13	; 19
 350:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Timer2_INIT>
				while(count_t2<MaxCount_t2) //5 seconds wait
 354:	41 c0       	rjmp	.+130    	; 0x3d8 <main+0xf8>
				{
					if(READBIT(PIND,0)==0)
 356:	80 99       	sbic	0x10, 0	; 16
 358:	1b c0       	rjmp	.+54     	; 0x390 <main+0xb0>
					{
						while(READBIT(PIND,0)==0){;}
 35a:	80 9b       	sbis	0x10, 0	; 16
 35c:	fe cf       	rjmp	.-4      	; 0x35a <main+0x7a>
						ReqTemp-=5;
 35e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 362:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 366:	05 97       	sbiw	r24, 0x05	; 5
 368:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 36c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						if(ReqTemp<35)
 370:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 374:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 378:	83 97       	sbiw	r24, 0x23	; 35
 37a:	34 f4       	brge	.+12     	; 0x388 <main+0xa8>
						{
							ReqTemp=35;
 37c:	83 e2       	ldi	r24, 0x23	; 35
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 384:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						}
						count_t2=0;
 388:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <count_t2+0x1>
 38c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <count_t2>
					}
					if(READBIT(PIND,1)==0)
 390:	81 99       	sbic	0x10, 1	; 16
 392:	1c c0       	rjmp	.+56     	; 0x3cc <main+0xec>
					{
						while(READBIT(PIND,1)==0){;}
 394:	81 9b       	sbis	0x10, 1	; 16
 396:	fe cf       	rjmp	.-4      	; 0x394 <main+0xb4>
						ReqTemp+=5;
 398:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a0:	05 96       	adiw	r24, 0x05	; 5
 3a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						if(ReqTemp>75)
 3aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3b2:	8c 34       	cpi	r24, 0x4C	; 76
 3b4:	91 05       	cpc	r25, r1
 3b6:	34 f0       	brlt	.+12     	; 0x3c4 <main+0xe4>
						{
							ReqTemp=75;
 3b8:	8b e4       	ldi	r24, 0x4B	; 75
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						}
						count_t2=0;
 3c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <count_t2+0x1>
 3c8:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <count_t2>
					}
					writeSS(ReqTemp);
 3cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3d4:	0e 94 3d 02 	call	0x47a	; 0x47a <writeSS>
			{
				SettingMode=1;
				while(READBIT(PIND,1)==0 || READBIT(PIND,0)==0){;}
				count_t2=0;
				Timer2_INIT(5000);
				while(count_t2<MaxCount_t2) //5 seconds wait
 3d8:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <count_t2>
 3dc:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <count_t2+0x1>
 3e0:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <MaxCount_t2>
 3e4:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <MaxCount_t2+0x1>
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	0c f4       	brge	.+2      	; 0x3f0 <main+0x110>
 3ee:	b3 cf       	rjmp	.-154    	; 0x356 <main+0x76>
						count_t2=0;
					}
					writeSS(ReqTemp);
					
				}
				CLEARBIT(TCCR2,CS01);  //Stops Timer2
 3f0:	85 b5       	in	r24, 0x25	; 37
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	85 bd       	out	0x25, r24	; 37
				SettingMode=0;
 3f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <SettingMode>
			}
			if(ActualTemp<ReqTemp-5)
 3fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3fe:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 402:	05 97       	sbiw	r24, 0x05	; 5
 404:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <ActualTemp>
 408:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <ActualTemp+0x1>
 40c:	28 17       	cp	r18, r24
 40e:	39 07       	cpc	r19, r25
 410:	1c f4       	brge	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			{
				Mode=1; //Activate Heater
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Mode>
			}
			if(ActualTemp>ReqTemp+5)
 418:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 420:	05 96       	adiw	r24, 0x05	; 5
 422:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <ActualTemp>
 426:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <ActualTemp+0x1>
 42a:	82 17       	cp	r24, r18
 42c:	93 07       	cpc	r25, r19
 42e:	14 f4       	brge	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				Mode=0; //Activate Cooler
 430:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Mode>
			}
			if(Mode==1)
 434:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Mode>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	31 f4       	brne	.+12     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			{
				SETBIT(PORTB,7);
 43c:	88 b3       	in	r24, 0x18	; 24
 43e:	80 68       	ori	r24, 0x80	; 128
 440:	88 bb       	out	0x18, r24	; 24
				CLEARBIT(PORTB,6);
 442:	88 b3       	in	r24, 0x18	; 24
 444:	8f 7b       	andi	r24, 0xBF	; 191
 446:	88 bb       	out	0x18, r24	; 24
			}
			if(Mode==0)
 448:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Mode>
 44c:	81 11       	cpse	r24, r1
 44e:	65 cf       	rjmp	.-310    	; 0x31a <main+0x3a>
			{
				SETBIT(PORTB,6);
 450:	88 b3       	in	r24, 0x18	; 24
 452:	80 64       	ori	r24, 0x40	; 64
 454:	88 bb       	out	0x18, r24	; 24
				CLEARBIT(PORTB,7);
 456:	88 b3       	in	r24, 0x18	; 24
 458:	8f 77       	andi	r24, 0x7F	; 127
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	5e cf       	rjmp	.-324    	; 0x31a <main+0x3a>

0000045e <SS_Init>:
#include "SS.h"


void SS_Init()
{
	DDRA |= 0xf0;
 45e:	8a b3       	in	r24, 0x1a	; 26
 460:	80 6f       	ori	r24, 0xF0	; 240
 462:	8a bb       	out	0x1a, r24	; 26
	DDRC |= 0x3c;
 464:	84 b3       	in	r24, 0x14	; 20
 466:	8c 63       	ori	r24, 0x3C	; 60
 468:	84 bb       	out	0x14, r24	; 20
 46a:	08 95       	ret

0000046c <SS_Deinit>:
}

void SS_Deinit()							//To allow blinking and shutting down
{
	DDRA &= 0x0f;
 46c:	8a b3       	in	r24, 0x1a	; 26
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	8a bb       	out	0x1a, r24	; 26
	DDRC &= 0xc3;
 472:	84 b3       	in	r24, 0x14	; 20
 474:	83 7c       	andi	r24, 0xC3	; 195
 476:	84 bb       	out	0x14, r24	; 20
 478:	08 95       	ret

0000047a <writeSS>:
}

void writeSS(int x)
{
	SS_WriteMostSig(x/10);					//write big number on portA -> (x/10)
 47a:	6a e0       	ldi	r22, 0x0A	; 10
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__divmodhi4>
 482:	62 95       	swap	r22
 484:	72 95       	swap	r23
 486:	70 7f       	andi	r23, 0xF0	; 240
 488:	76 27       	eor	r23, r22
 48a:	60 7f       	andi	r22, 0xF0	; 240
 48c:	76 27       	eor	r23, r22
 48e:	2b b3       	in	r18, 0x1b	; 27
 490:	2f 70       	andi	r18, 0x0F	; 15
 492:	62 2b       	or	r22, r18
 494:	6b bb       	out	0x1b, r22	; 27
	SS_WriteLeastSig(x%10);					//write small number on portC -> (x%10)
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	95 b3       	in	r25, 0x15	; 21
 4a0:	93 7c       	andi	r25, 0xC3	; 195
 4a2:	89 2b       	or	r24, r25
 4a4:	85 bb       	out	0x15, r24	; 21
 4a6:	08 95       	ret

000004a8 <TIMER0_INIT>:
volatile int ActualTemp=60;
volatile char Mode;
volatile char SettingMode;

void TIMER0_INIT(int DesiredTime)
{	
 4a8:	af 92       	push	r10
 4aa:	bf 92       	push	r11
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	39 2f       	mov	r19, r25
	sei();						//Global Interrupt EN
 4ba:	78 94       	sei
	SETBIT(TCCR0,CS00);
 4bc:	23 b7       	in	r18, 0x33	; 51
 4be:	21 60       	ori	r18, 0x01	; 1
 4c0:	23 bf       	out	0x33, r18	; 51
	SETBIT(TCCR0,CS01);			//Prescalar = 8
 4c2:	23 b7       	in	r18, 0x33	; 51
 4c4:	22 60       	ori	r18, 0x02	; 2
 4c6:	23 bf       	out	0x33, r18	; 51
	CLEARBIT(TCCR0,CS02);
 4c8:	23 b7       	in	r18, 0x33	; 51
 4ca:	2b 7f       	andi	r18, 0xFB	; 251
 4cc:	23 bf       	out	0x33, r18	; 51
	SETBIT(TIMSK,TOIE0);		//Interrupt EN
 4ce:	29 b7       	in	r18, 0x39	; 57
 4d0:	21 60       	ori	r18, 0x01	; 1
 4d2:	29 bf       	out	0x39, r18	; 57
	
	int cal = 0;
	cal = NUMOVFT0(DesiredTime);
 4d4:	28 2f       	mov	r18, r24
 4d6:	99 0f       	add	r25, r25
 4d8:	99 0b       	sbc	r25, r25
 4da:	68 94       	set
 4dc:	aa 24       	eor	r10, r10
 4de:	a7 f8       	bld	r10, 7
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f6 e9       	ldi	r31, 0x96	; 150
 4e4:	bf 2e       	mov	r11, r31
 4e6:	f0 2d       	mov	r31, r0
 4e8:	0f 2e       	mov	r0, r31
 4ea:	f8 e9       	ldi	r31, 0x98	; 152
 4ec:	cf 2e       	mov	r12, r31
 4ee:	f0 2d       	mov	r31, r0
 4f0:	d1 2c       	mov	r13, r1
 4f2:	e1 2c       	mov	r14, r1
 4f4:	f1 2c       	mov	r15, r1
 4f6:	00 e0       	ldi	r16, 0x00	; 0
 4f8:	10 e0       	ldi	r17, 0x00	; 0
 4fa:	49 2f       	mov	r20, r25
 4fc:	59 2f       	mov	r21, r25
 4fe:	69 2f       	mov	r22, r25
 500:	79 2f       	mov	r23, r25
 502:	89 2f       	mov	r24, r25
 504:	0e 94 12 05 	call	0xa24	; 0xa24 <__muldi3>
 508:	a1 2c       	mov	r10, r1
 50a:	b1 2c       	mov	r11, r1
 50c:	0f 2e       	mov	r0, r31
 50e:	fa ef       	ldi	r31, 0xFA	; 250
 510:	cf 2e       	mov	r12, r31
 512:	f0 2d       	mov	r31, r0
 514:	0e 94 6d 05 	call	0xada	; 0xada <__udivdi3>
 518:	82 2f       	mov	r24, r18
 51a:	93 2f       	mov	r25, r19
	MaxCount = cal/10;
 51c:	2a e0       	ldi	r18, 0x0A	; 10
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__divmodhi4>
 526:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <MaxCount+0x1>
 52a:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <MaxCount>
	PreloadValue = PRELOAD(cal);
 52e:	a9 01       	movw	r20, r18
 530:	48 1b       	sub	r20, r24
 532:	59 0b       	sbc	r21, r25
 534:	94 2f       	mov	r25, r20
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	b9 01       	movw	r22, r18
 53a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__divmodhi4>
 53e:	70 93 7e 00 	sts	0x007E, r23	; 0x80007e <PreloadValue+0x1>
 542:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <PreloadValue>
}
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	bf 90       	pop	r11
 554:	af 90       	pop	r10
 556:	08 95       	ret

00000558 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	counter++;
 57e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <counter>
 582:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <counter+0x1>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <counter+0x1>
 58c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <counter>
	if (counter > MaxCount)
 590:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <counter>
 594:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <counter+0x1>
 598:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <MaxCount>
 59c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <MaxCount+0x1>
 5a0:	82 17       	cp	r24, r18
 5a2:	93 07       	cpc	r25, r19
 5a4:	0c f0       	brlt	.+2      	; 0x5a8 <__vector_11+0x50>
 5a6:	7a c0       	rjmp	.+244    	; 0x69c <__vector_11+0x144>
	{
		//Counting 100 ms
		counter = 0;
 5a8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <counter+0x1>
 5ac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <counter>
		
		SumTemp -= MeasuredTemp[ArrCount];							//Delete the most early temperature measured
 5b0:	c0 91 7b 00 	lds	r28, 0x007B	; 0x80007b <ArrCount>
 5b4:	d0 91 7c 00 	lds	r29, 0x007C	; 0x80007c <ArrCount+0x1>
 5b8:	cc 0f       	add	r28, r28
 5ba:	dd 1f       	adc	r29, r29
 5bc:	ca 59       	subi	r28, 0x9A	; 154
 5be:	df 4f       	sbci	r29, 0xFF	; 255
 5c0:	28 81       	ld	r18, Y
 5c2:	39 81       	ldd	r19, Y+1	; 0x01
 5c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SumTemp>
 5c8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <SumTemp+0x1>
 5cc:	82 1b       	sub	r24, r18
 5ce:	93 0b       	sbc	r25, r19
 5d0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SumTemp+0x1>
 5d4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SumTemp>
		MeasuredTemp[ArrCount] = (500.0 * ADC_Read(0)) / 1024.0;	//Measure the new temperature
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Read>
 5e0:	bc 01       	movw	r22, r24
 5e2:	99 0f       	add	r25, r25
 5e4:	88 0b       	sbc	r24, r24
 5e6:	99 0b       	sbc	r25, r25
 5e8:	0e 94 05 04 	call	0x80a	; 0x80a <__floatsisf>
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	4a ef       	ldi	r20, 0xFA	; 250
 5f2:	53 e4       	ldi	r21, 0x43	; 67
 5f4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__mulsf3>
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	40 e8       	ldi	r20, 0x80	; 128
 5fe:	5a e3       	ldi	r21, 0x3A	; 58
 600:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__mulsf3>
 604:	0e 94 cd 03 	call	0x79a	; 0x79a <__fixsfsi>
 608:	79 83       	std	Y+1, r23	; 0x01
 60a:	68 83       	st	Y, r22
		SumTemp += MeasuredTemp[ArrCount];							//Adds the new temperature
 60c:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <ArrCount>
 610:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <ArrCount+0x1>
 614:	f9 01       	movw	r30, r18
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	ea 59       	subi	r30, 0x9A	; 154
 61c:	ff 4f       	sbci	r31, 0xFF	; 255
 61e:	40 81       	ld	r20, Z
 620:	51 81       	ldd	r21, Z+1	; 0x01
 622:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SumTemp>
 626:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <SumTemp+0x1>
 62a:	84 0f       	add	r24, r20
 62c:	95 1f       	adc	r25, r21
 62e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SumTemp+0x1>
 632:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SumTemp>
		ActualTemp = SumTemp / 10;									//Gets the average of all measured temperature
 636:	6a e0       	ldi	r22, 0x0A	; 10
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__divmodhi4>
 63e:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <ActualTemp+0x1>
 642:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <ActualTemp>
		ArrCount++;
 646:	2f 5f       	subi	r18, 0xFF	; 255
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <ArrCount+0x1>
 64e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <ArrCount>
		
		//Counting 1 Second
		
		if (ArrCount >= 10)											//If the timer counts 1 second
 652:	2a 30       	cpi	r18, 0x0A	; 10
 654:	31 05       	cpc	r19, r1
 656:	14 f1       	brlt	.+68     	; 0x69c <__vector_11+0x144>
		{
			ArrCount = 0;											//reset the arrayCount
 658:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ArrCount+0x1>
 65c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ArrCount>
			if (Mode==1)											//Heating element on
 660:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Mode>
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	61 f4       	brne	.+24     	; 0x680 <__vector_11+0x128>
			{
				TOGGLEBIT(PORTC,7);
 668:	85 b3       	in	r24, 0x15	; 21
 66a:	80 58       	subi	r24, 0x80	; 128
 66c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66e:	87 ea       	ldi	r24, 0xA7	; 167
 670:	91 e6       	ldi	r25, 0x61	; 97
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <__vector_11+0x11a>
 676:	00 c0       	rjmp	.+0      	; 0x678 <__vector_11+0x120>
 678:	00 00       	nop
				_delay_ms(100);
				TOGGLEBIT(PORTC,7);
 67a:	85 b3       	in	r24, 0x15	; 21
 67c:	80 58       	subi	r24, 0x80	; 128
 67e:	85 bb       	out	0x15, r24	; 21
			}
			if (SettingMode)										//Temp Setting mode
 680:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <SettingMode>
 684:	88 23       	and	r24, r24
 686:	51 f0       	breq	.+20     	; 0x69c <__vector_11+0x144>
			{
				SS_Deinit();
 688:	0e 94 36 02 	call	0x46c	; 0x46c <SS_Deinit>
 68c:	87 ea       	ldi	r24, 0xA7	; 167
 68e:	91 e6       	ldi	r25, 0x61	; 97
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <__vector_11+0x138>
 694:	00 c0       	rjmp	.+0      	; 0x696 <__vector_11+0x13e>
 696:	00 00       	nop
				_delay_ms(100);
				SS_Init();
 698:	0e 94 2f 02 	call	0x45e	; 0x45e <SS_Init>
			}
		}
	}
}
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <Timer2_INIT>:
volatile int count_t2=0;
volatile int MaxCount_t2=0;
volatile int Preload_t2=0;

void Timer2_INIT(int DesiredT)
{
 6c2:	af 92       	push	r10
 6c4:	bf 92       	push	r11
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	39 2f       	mov	r19, r25
	SETBIT(TCCR2,CS01);
 6d4:	25 b5       	in	r18, 0x25	; 37
 6d6:	22 60       	ori	r18, 0x02	; 2
 6d8:	25 bd       	out	0x25, r18	; 37
	SETBIT(TIMSK,TOIE2);
 6da:	29 b7       	in	r18, 0x39	; 57
 6dc:	20 64       	ori	r18, 0x40	; 64
 6de:	29 bf       	out	0x39, r18	; 57
	sei(); //global interrupt enable
 6e0:	78 94       	sei
	int cal=NOVF(DesiredT);
 6e2:	28 2f       	mov	r18, r24
 6e4:	99 0f       	add	r25, r25
 6e6:	99 0b       	sbc	r25, r25
 6e8:	68 94       	set
 6ea:	aa 24       	eor	r10, r10
 6ec:	a7 f8       	bld	r10, 7
 6ee:	0f 2e       	mov	r0, r31
 6f0:	f6 e9       	ldi	r31, 0x96	; 150
 6f2:	bf 2e       	mov	r11, r31
 6f4:	f0 2d       	mov	r31, r0
 6f6:	0f 2e       	mov	r0, r31
 6f8:	f8 e9       	ldi	r31, 0x98	; 152
 6fa:	cf 2e       	mov	r12, r31
 6fc:	f0 2d       	mov	r31, r0
 6fe:	d1 2c       	mov	r13, r1
 700:	e1 2c       	mov	r14, r1
 702:	f1 2c       	mov	r15, r1
 704:	00 e0       	ldi	r16, 0x00	; 0
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	49 2f       	mov	r20, r25
 70a:	59 2f       	mov	r21, r25
 70c:	69 2f       	mov	r22, r25
 70e:	79 2f       	mov	r23, r25
 710:	89 2f       	mov	r24, r25
 712:	0e 94 12 05 	call	0xa24	; 0xa24 <__muldi3>
 716:	a1 2c       	mov	r10, r1
 718:	68 94       	set
 71a:	bb 24       	eor	r11, r11
 71c:	b6 f8       	bld	r11, 6
 71e:	0f 2e       	mov	r0, r31
 720:	ff e1       	ldi	r31, 0x1F	; 31
 722:	cf 2e       	mov	r12, r31
 724:	f0 2d       	mov	r31, r0
 726:	0e 94 6d 05 	call	0xada	; 0xada <__udivdi3>
 72a:	e2 2f       	mov	r30, r18
 72c:	f3 2f       	mov	r31, r19
	Preload_t2=PRELOAD_t2(cal);
 72e:	2a e0       	ldi	r18, 0x0A	; 10
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	c9 01       	movw	r24, r18
 734:	8e 1b       	sub	r24, r30
 736:	9f 0b       	sbc	r25, r31
 738:	98 2f       	mov	r25, r24
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	b9 01       	movw	r22, r18
 73e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__divmodhi4>
 742:	70 93 84 00 	sts	0x0084, r23	; 0x800084 <Preload_t2+0x1>
 746:	60 93 83 00 	sts	0x0083, r22	; 0x800083 <Preload_t2>
	MaxCount_t2=cal/10;
 74a:	cf 01       	movw	r24, r30
 74c:	b9 01       	movw	r22, r18
 74e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__divmodhi4>
 752:	70 93 86 00 	sts	0x0086, r23	; 0x800086 <MaxCount_t2+0x1>
 756:	60 93 85 00 	sts	0x0085, r22	; 0x800085 <MaxCount_t2>
}
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	df 90       	pop	r13
 764:	cf 90       	pop	r12
 766:	bf 90       	pop	r11
 768:	af 90       	pop	r10
 76a:	08 95       	ret

0000076c <__vector_5>:



ISR(TIMER2_OVF_vect)
{
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	8f 93       	push	r24
 778:	9f 93       	push	r25
	count_t2++;
 77a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <count_t2>
 77e:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <count_t2+0x1>
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <count_t2+0x1>
 788:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <count_t2>
}
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <__fixsfsi>:
 79a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fixunssfsi>
 79e:	68 94       	set
 7a0:	b1 11       	cpse	r27, r1
 7a2:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_szero>
 7a6:	08 95       	ret

000007a8 <__fixunssfsi>:
 7a8:	0e 94 48 04 	call	0x890	; 0x890 <__fp_splitA>
 7ac:	88 f0       	brcs	.+34     	; 0x7d0 <__fixunssfsi+0x28>
 7ae:	9f 57       	subi	r25, 0x7F	; 127
 7b0:	98 f0       	brcs	.+38     	; 0x7d8 <__fixunssfsi+0x30>
 7b2:	b9 2f       	mov	r27, r25
 7b4:	99 27       	eor	r25, r25
 7b6:	b7 51       	subi	r27, 0x17	; 23
 7b8:	b0 f0       	brcs	.+44     	; 0x7e6 <__fixunssfsi+0x3e>
 7ba:	e1 f0       	breq	.+56     	; 0x7f4 <__fixunssfsi+0x4c>
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	1a f0       	brmi	.+6      	; 0x7cc <__fixunssfsi+0x24>
 7c6:	ba 95       	dec	r27
 7c8:	c9 f7       	brne	.-14     	; 0x7bc <__fixunssfsi+0x14>
 7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <__fixunssfsi+0x4c>
 7cc:	b1 30       	cpi	r27, 0x01	; 1
 7ce:	91 f0       	breq	.+36     	; 0x7f4 <__fixunssfsi+0x4c>
 7d0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_zero>
 7d4:	b1 e0       	ldi	r27, 0x01	; 1
 7d6:	08 95       	ret
 7d8:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_zero>
 7dc:	67 2f       	mov	r22, r23
 7de:	78 2f       	mov	r23, r24
 7e0:	88 27       	eor	r24, r24
 7e2:	b8 5f       	subi	r27, 0xF8	; 248
 7e4:	39 f0       	breq	.+14     	; 0x7f4 <__fixunssfsi+0x4c>
 7e6:	b9 3f       	cpi	r27, 0xF9	; 249
 7e8:	cc f3       	brlt	.-14     	; 0x7dc <__fixunssfsi+0x34>
 7ea:	86 95       	lsr	r24
 7ec:	77 95       	ror	r23
 7ee:	67 95       	ror	r22
 7f0:	b3 95       	inc	r27
 7f2:	d9 f7       	brne	.-10     	; 0x7ea <__fixunssfsi+0x42>
 7f4:	3e f4       	brtc	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	08 95       	ret

00000806 <__floatunsisf>:
 806:	e8 94       	clt
 808:	09 c0       	rjmp	.+18     	; 0x81c <__floatsisf+0x12>

0000080a <__floatsisf>:
 80a:	97 fb       	bst	r25, 7
 80c:	3e f4       	brtc	.+14     	; 0x81c <__floatsisf+0x12>
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	99 23       	and	r25, r25
 81e:	a9 f0       	breq	.+42     	; 0x84a <__floatsisf+0x40>
 820:	f9 2f       	mov	r31, r25
 822:	96 e9       	ldi	r25, 0x96	; 150
 824:	bb 27       	eor	r27, r27
 826:	93 95       	inc	r25
 828:	f6 95       	lsr	r31
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f1 11       	cpse	r31, r1
 834:	f8 cf       	rjmp	.-16     	; 0x826 <__floatsisf+0x1c>
 836:	fa f4       	brpl	.+62     	; 0x876 <__stack+0x17>
 838:	bb 0f       	add	r27, r27
 83a:	11 f4       	brne	.+4      	; 0x840 <__floatsisf+0x36>
 83c:	60 ff       	sbrs	r22, 0
 83e:	1b c0       	rjmp	.+54     	; 0x876 <__stack+0x17>
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	16 c0       	rjmp	.+44     	; 0x876 <__stack+0x17>
 84a:	88 23       	and	r24, r24
 84c:	11 f0       	breq	.+4      	; 0x852 <__floatsisf+0x48>
 84e:	96 e9       	ldi	r25, 0x96	; 150
 850:	11 c0       	rjmp	.+34     	; 0x874 <__stack+0x15>
 852:	77 23       	and	r23, r23
 854:	21 f0       	breq	.+8      	; 0x85e <__floatsisf+0x54>
 856:	9e e8       	ldi	r25, 0x8E	; 142
 858:	87 2f       	mov	r24, r23
 85a:	76 2f       	mov	r23, r22
 85c:	05 c0       	rjmp	.+10     	; 0x868 <__stack+0x9>
 85e:	66 23       	and	r22, r22
 860:	71 f0       	breq	.+28     	; 0x87e <__stack+0x1f>
 862:	96 e8       	ldi	r25, 0x86	; 134
 864:	86 2f       	mov	r24, r22
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	2a f0       	brmi	.+10     	; 0x876 <__stack+0x17>
 86c:	9a 95       	dec	r25
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	da f7       	brpl	.-10     	; 0x86c <__stack+0xd>
 876:	88 0f       	add	r24, r24
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret

00000880 <__fp_split3>:
 880:	57 fd       	sbrc	r21, 7
 882:	90 58       	subi	r25, 0x80	; 128
 884:	44 0f       	add	r20, r20
 886:	55 1f       	adc	r21, r21
 888:	59 f0       	breq	.+22     	; 0x8a0 <__fp_splitA+0x10>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	71 f0       	breq	.+28     	; 0x8aa <__fp_splitA+0x1a>
 88e:	47 95       	ror	r20

00000890 <__fp_splitA>:
 890:	88 0f       	add	r24, r24
 892:	97 fb       	bst	r25, 7
 894:	99 1f       	adc	r25, r25
 896:	61 f0       	breq	.+24     	; 0x8b0 <__fp_splitA+0x20>
 898:	9f 3f       	cpi	r25, 0xFF	; 255
 89a:	79 f0       	breq	.+30     	; 0x8ba <__fp_splitA+0x2a>
 89c:	87 95       	ror	r24
 89e:	08 95       	ret
 8a0:	12 16       	cp	r1, r18
 8a2:	13 06       	cpc	r1, r19
 8a4:	14 06       	cpc	r1, r20
 8a6:	55 1f       	adc	r21, r21
 8a8:	f2 cf       	rjmp	.-28     	; 0x88e <__fp_split3+0xe>
 8aa:	46 95       	lsr	r20
 8ac:	f1 df       	rcall	.-30     	; 0x890 <__fp_splitA>
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <__fp_splitA+0x30>
 8b0:	16 16       	cp	r1, r22
 8b2:	17 06       	cpc	r1, r23
 8b4:	18 06       	cpc	r1, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	f1 cf       	rjmp	.-30     	; 0x89c <__fp_splitA+0xc>
 8ba:	86 95       	lsr	r24
 8bc:	71 05       	cpc	r23, r1
 8be:	61 05       	cpc	r22, r1
 8c0:	08 94       	sec
 8c2:	08 95       	ret

000008c4 <__fp_zero>:
 8c4:	e8 94       	clt

000008c6 <__fp_szero>:
 8c6:	bb 27       	eor	r27, r27
 8c8:	66 27       	eor	r22, r22
 8ca:	77 27       	eor	r23, r23
 8cc:	cb 01       	movw	r24, r22
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret

000008d2 <__mulsf3>:
 8d2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3x>
 8d6:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_round>
 8da:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_pscA>
 8de:	38 f0       	brcs	.+14     	; 0x8ee <__mulsf3+0x1c>
 8e0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fp_pscB>
 8e4:	20 f0       	brcs	.+8      	; 0x8ee <__mulsf3+0x1c>
 8e6:	95 23       	and	r25, r21
 8e8:	11 f0       	breq	.+4      	; 0x8ee <__mulsf3+0x1c>
 8ea:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_inf>
 8ee:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_nan>
 8f2:	11 24       	eor	r1, r1
 8f4:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_szero>

000008f8 <__mulsf3x>:
 8f8:	0e 94 40 04 	call	0x880	; 0x880 <__fp_split3>
 8fc:	70 f3       	brcs	.-36     	; 0x8da <__mulsf3+0x8>

000008fe <__mulsf3_pse>:
 8fe:	95 9f       	mul	r25, r21
 900:	c1 f3       	breq	.-16     	; 0x8f2 <__mulsf3+0x20>
 902:	95 0f       	add	r25, r21
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	55 1f       	adc	r21, r21
 908:	62 9f       	mul	r22, r18
 90a:	f0 01       	movw	r30, r0
 90c:	72 9f       	mul	r23, r18
 90e:	bb 27       	eor	r27, r27
 910:	f0 0d       	add	r31, r0
 912:	b1 1d       	adc	r27, r1
 914:	63 9f       	mul	r22, r19
 916:	aa 27       	eor	r26, r26
 918:	f0 0d       	add	r31, r0
 91a:	b1 1d       	adc	r27, r1
 91c:	aa 1f       	adc	r26, r26
 91e:	64 9f       	mul	r22, r20
 920:	66 27       	eor	r22, r22
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	66 1f       	adc	r22, r22
 928:	82 9f       	mul	r24, r18
 92a:	22 27       	eor	r18, r18
 92c:	b0 0d       	add	r27, r0
 92e:	a1 1d       	adc	r26, r1
 930:	62 1f       	adc	r22, r18
 932:	73 9f       	mul	r23, r19
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	62 1f       	adc	r22, r18
 93a:	83 9f       	mul	r24, r19
 93c:	a0 0d       	add	r26, r0
 93e:	61 1d       	adc	r22, r1
 940:	22 1f       	adc	r18, r18
 942:	74 9f       	mul	r23, r20
 944:	33 27       	eor	r19, r19
 946:	a0 0d       	add	r26, r0
 948:	61 1d       	adc	r22, r1
 94a:	23 1f       	adc	r18, r19
 94c:	84 9f       	mul	r24, r20
 94e:	60 0d       	add	r22, r0
 950:	21 1d       	adc	r18, r1
 952:	82 2f       	mov	r24, r18
 954:	76 2f       	mov	r23, r22
 956:	6a 2f       	mov	r22, r26
 958:	11 24       	eor	r1, r1
 95a:	9f 57       	subi	r25, 0x7F	; 127
 95c:	50 40       	sbci	r21, 0x00	; 0
 95e:	9a f0       	brmi	.+38     	; 0x986 <__mulsf3_pse+0x88>
 960:	f1 f0       	breq	.+60     	; 0x99e <__mulsf3_pse+0xa0>
 962:	88 23       	and	r24, r24
 964:	4a f0       	brmi	.+18     	; 0x978 <__mulsf3_pse+0x7a>
 966:	ee 0f       	add	r30, r30
 968:	ff 1f       	adc	r31, r31
 96a:	bb 1f       	adc	r27, r27
 96c:	66 1f       	adc	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	91 50       	subi	r25, 0x01	; 1
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	a9 f7       	brne	.-22     	; 0x962 <__mulsf3_pse+0x64>
 978:	9e 3f       	cpi	r25, 0xFE	; 254
 97a:	51 05       	cpc	r21, r1
 97c:	80 f0       	brcs	.+32     	; 0x99e <__mulsf3_pse+0xa0>
 97e:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_inf>
 982:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_szero>
 986:	5f 3f       	cpi	r21, 0xFF	; 255
 988:	e4 f3       	brlt	.-8      	; 0x982 <__mulsf3_pse+0x84>
 98a:	98 3e       	cpi	r25, 0xE8	; 232
 98c:	d4 f3       	brlt	.-12     	; 0x982 <__mulsf3_pse+0x84>
 98e:	86 95       	lsr	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b7 95       	ror	r27
 996:	f7 95       	ror	r31
 998:	e7 95       	ror	r30
 99a:	9f 5f       	subi	r25, 0xFF	; 255
 99c:	c1 f7       	brne	.-16     	; 0x98e <__mulsf3_pse+0x90>
 99e:	fe 2b       	or	r31, r30
 9a0:	88 0f       	add	r24, r24
 9a2:	91 1d       	adc	r25, r1
 9a4:	96 95       	lsr	r25
 9a6:	87 95       	ror	r24
 9a8:	97 f9       	bld	r25, 7
 9aa:	08 95       	ret

000009ac <__fp_inf>:
 9ac:	97 f9       	bld	r25, 7
 9ae:	9f 67       	ori	r25, 0x7F	; 127
 9b0:	80 e8       	ldi	r24, 0x80	; 128
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	08 95       	ret

000009b8 <__fp_nan>:
 9b8:	9f ef       	ldi	r25, 0xFF	; 255
 9ba:	80 ec       	ldi	r24, 0xC0	; 192
 9bc:	08 95       	ret

000009be <__fp_pscA>:
 9be:	00 24       	eor	r0, r0
 9c0:	0a 94       	dec	r0
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	18 06       	cpc	r1, r24
 9c8:	09 06       	cpc	r0, r25
 9ca:	08 95       	ret

000009cc <__fp_pscB>:
 9cc:	00 24       	eor	r0, r0
 9ce:	0a 94       	dec	r0
 9d0:	12 16       	cp	r1, r18
 9d2:	13 06       	cpc	r1, r19
 9d4:	14 06       	cpc	r1, r20
 9d6:	05 06       	cpc	r0, r21
 9d8:	08 95       	ret

000009da <__fp_round>:
 9da:	09 2e       	mov	r0, r25
 9dc:	03 94       	inc	r0
 9de:	00 0c       	add	r0, r0
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <__fp_round+0xc>
 9e2:	88 23       	and	r24, r24
 9e4:	52 f0       	brmi	.+20     	; 0x9fa <__fp_round+0x20>
 9e6:	bb 0f       	add	r27, r27
 9e8:	40 f4       	brcc	.+16     	; 0x9fa <__fp_round+0x20>
 9ea:	bf 2b       	or	r27, r31
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__fp_round+0x18>
 9ee:	60 ff       	sbrs	r22, 0
 9f0:	04 c0       	rjmp	.+8      	; 0x9fa <__fp_round+0x20>
 9f2:	6f 5f       	subi	r22, 0xFF	; 255
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	08 95       	ret

000009fc <__divmodhi4>:
 9fc:	97 fb       	bst	r25, 7
 9fe:	07 2e       	mov	r0, r23
 a00:	16 f4       	brtc	.+4      	; 0xa06 <__divmodhi4+0xa>
 a02:	00 94       	com	r0
 a04:	07 d0       	rcall	.+14     	; 0xa14 <__divmodhi4_neg1>
 a06:	77 fd       	sbrc	r23, 7
 a08:	09 d0       	rcall	.+18     	; 0xa1c <__divmodhi4_neg2>
 a0a:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodhi4>
 a0e:	07 fc       	sbrc	r0, 7
 a10:	05 d0       	rcall	.+10     	; 0xa1c <__divmodhi4_neg2>
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__divmodhi4_exit>

00000a14 <__divmodhi4_neg1>:
 a14:	90 95       	com	r25
 a16:	81 95       	neg	r24
 a18:	9f 4f       	sbci	r25, 0xFF	; 255
 a1a:	08 95       	ret

00000a1c <__divmodhi4_neg2>:
 a1c:	70 95       	com	r23
 a1e:	61 95       	neg	r22
 a20:	7f 4f       	sbci	r23, 0xFF	; 255

00000a22 <__divmodhi4_exit>:
 a22:	08 95       	ret

00000a24 <__muldi3>:
 a24:	df 93       	push	r29
 a26:	cf 93       	push	r28
 a28:	1f 93       	push	r17
 a2a:	0f 93       	push	r16
 a2c:	9a 9d       	mul	r25, r10
 a2e:	f0 2d       	mov	r31, r0
 a30:	21 9f       	mul	r18, r17
 a32:	f0 0d       	add	r31, r0
 a34:	8b 9d       	mul	r24, r11
 a36:	f0 0d       	add	r31, r0
 a38:	8a 9d       	mul	r24, r10
 a3a:	e0 2d       	mov	r30, r0
 a3c:	f1 0d       	add	r31, r1
 a3e:	03 9f       	mul	r16, r19
 a40:	f0 0d       	add	r31, r0
 a42:	02 9f       	mul	r16, r18
 a44:	e0 0d       	add	r30, r0
 a46:	f1 1d       	adc	r31, r1
 a48:	4e 9d       	mul	r20, r14
 a4a:	e0 0d       	add	r30, r0
 a4c:	f1 1d       	adc	r31, r1
 a4e:	5e 9d       	mul	r21, r14
 a50:	f0 0d       	add	r31, r0
 a52:	4f 9d       	mul	r20, r15
 a54:	f0 0d       	add	r31, r0
 a56:	7f 93       	push	r23
 a58:	6f 93       	push	r22
 a5a:	bf 92       	push	r11
 a5c:	af 92       	push	r10
 a5e:	5f 93       	push	r21
 a60:	4f 93       	push	r20
 a62:	d5 01       	movw	r26, r10
 a64:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 a68:	8b 01       	movw	r16, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	d7 01       	movw	r26, r14
 a6e:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 a72:	eb 01       	movw	r28, r22
 a74:	e8 0f       	add	r30, r24
 a76:	f9 1f       	adc	r31, r25
 a78:	d6 01       	movw	r26, r12
 a7a:	0e 94 62 05 	call	0xac4	; 0xac4 <__muldi3_6>
 a7e:	2f 91       	pop	r18
 a80:	3f 91       	pop	r19
 a82:	d6 01       	movw	r26, r12
 a84:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 a88:	c6 0f       	add	r28, r22
 a8a:	d7 1f       	adc	r29, r23
 a8c:	e8 1f       	adc	r30, r24
 a8e:	f9 1f       	adc	r31, r25
 a90:	af 91       	pop	r26
 a92:	bf 91       	pop	r27
 a94:	0e 94 62 05 	call	0xac4	; 0xac4 <__muldi3_6>
 a98:	2f 91       	pop	r18
 a9a:	3f 91       	pop	r19
 a9c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 aa0:	c6 0f       	add	r28, r22
 aa2:	d7 1f       	adc	r29, r23
 aa4:	e8 1f       	adc	r30, r24
 aa6:	f9 1f       	adc	r31, r25
 aa8:	d6 01       	movw	r26, r12
 aaa:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 aae:	e6 0f       	add	r30, r22
 ab0:	f7 1f       	adc	r31, r23
 ab2:	98 01       	movw	r18, r16
 ab4:	be 01       	movw	r22, r28
 ab6:	cf 01       	movw	r24, r30
 ab8:	11 24       	eor	r1, r1
 aba:	0f 91       	pop	r16
 abc:	1f 91       	pop	r17
 abe:	cf 91       	pop	r28
 ac0:	df 91       	pop	r29
 ac2:	08 95       	ret

00000ac4 <__muldi3_6>:
 ac4:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 ac8:	46 0f       	add	r20, r22
 aca:	57 1f       	adc	r21, r23
 acc:	c8 1f       	adc	r28, r24
 ace:	d9 1f       	adc	r29, r25
 ad0:	08 f4       	brcc	.+2      	; 0xad4 <__muldi3_6+0x10>
 ad2:	31 96       	adiw	r30, 0x01	; 1
 ad4:	08 95       	ret

00000ad6 <__umoddi3>:
 ad6:	68 94       	set
 ad8:	01 c0       	rjmp	.+2      	; 0xadc <__udivdi3_umoddi3>

00000ada <__udivdi3>:
 ada:	e8 94       	clt

00000adc <__udivdi3_umoddi3>:
 adc:	8f 92       	push	r8
 ade:	9f 92       	push	r9
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
 ae4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__udivmod64>
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	9f 90       	pop	r9
 aee:	8f 90       	pop	r8
 af0:	08 95       	ret

00000af2 <__udivmod64>:
 af2:	88 24       	eor	r8, r8
 af4:	99 24       	eor	r9, r9
 af6:	f4 01       	movw	r30, r8
 af8:	e4 01       	movw	r28, r8
 afa:	b0 e4       	ldi	r27, 0x40	; 64
 afc:	9f 93       	push	r25
 afe:	aa 27       	eor	r26, r26
 b00:	9a 15       	cp	r25, r10
 b02:	8b 04       	cpc	r8, r11
 b04:	9c 04       	cpc	r9, r12
 b06:	ed 05       	cpc	r30, r13
 b08:	fe 05       	cpc	r31, r14
 b0a:	cf 05       	cpc	r28, r15
 b0c:	d0 07       	cpc	r29, r16
 b0e:	a1 07       	cpc	r26, r17
 b10:	98 f4       	brcc	.+38     	; 0xb38 <__udivmod64+0x46>
 b12:	ad 2f       	mov	r26, r29
 b14:	dc 2f       	mov	r29, r28
 b16:	cf 2f       	mov	r28, r31
 b18:	fe 2f       	mov	r31, r30
 b1a:	e9 2d       	mov	r30, r9
 b1c:	98 2c       	mov	r9, r8
 b1e:	89 2e       	mov	r8, r25
 b20:	98 2f       	mov	r25, r24
 b22:	87 2f       	mov	r24, r23
 b24:	76 2f       	mov	r23, r22
 b26:	65 2f       	mov	r22, r21
 b28:	54 2f       	mov	r21, r20
 b2a:	43 2f       	mov	r20, r19
 b2c:	32 2f       	mov	r19, r18
 b2e:	22 27       	eor	r18, r18
 b30:	b8 50       	subi	r27, 0x08	; 8
 b32:	31 f7       	brne	.-52     	; 0xb00 <__udivmod64+0xe>
 b34:	bf 91       	pop	r27
 b36:	27 c0       	rjmp	.+78     	; 0xb86 <__udivmod64+0x94>
 b38:	1b 2e       	mov	r1, r27
 b3a:	bf 91       	pop	r27
 b3c:	bb 27       	eor	r27, r27
 b3e:	22 0f       	add	r18, r18
 b40:	33 1f       	adc	r19, r19
 b42:	44 1f       	adc	r20, r20
 b44:	55 1f       	adc	r21, r21
 b46:	66 1f       	adc	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	88 1c       	adc	r8, r8
 b50:	99 1c       	adc	r9, r9
 b52:	ee 1f       	adc	r30, r30
 b54:	ff 1f       	adc	r31, r31
 b56:	cc 1f       	adc	r28, r28
 b58:	dd 1f       	adc	r29, r29
 b5a:	aa 1f       	adc	r26, r26
 b5c:	bb 1f       	adc	r27, r27
 b5e:	8a 14       	cp	r8, r10
 b60:	9b 04       	cpc	r9, r11
 b62:	ec 05       	cpc	r30, r12
 b64:	fd 05       	cpc	r31, r13
 b66:	ce 05       	cpc	r28, r14
 b68:	df 05       	cpc	r29, r15
 b6a:	a0 07       	cpc	r26, r16
 b6c:	b1 07       	cpc	r27, r17
 b6e:	48 f0       	brcs	.+18     	; 0xb82 <__udivmod64+0x90>
 b70:	8a 18       	sub	r8, r10
 b72:	9b 08       	sbc	r9, r11
 b74:	ec 09       	sbc	r30, r12
 b76:	fd 09       	sbc	r31, r13
 b78:	ce 09       	sbc	r28, r14
 b7a:	df 09       	sbc	r29, r15
 b7c:	a0 0b       	sbc	r26, r16
 b7e:	b1 0b       	sbc	r27, r17
 b80:	21 60       	ori	r18, 0x01	; 1
 b82:	1a 94       	dec	r1
 b84:	e1 f6       	brne	.-72     	; 0xb3e <__udivmod64+0x4c>
 b86:	2e f4       	brtc	.+10     	; 0xb92 <__udivmod64+0xa0>
 b88:	94 01       	movw	r18, r8
 b8a:	af 01       	movw	r20, r30
 b8c:	be 01       	movw	r22, r28
 b8e:	cd 01       	movw	r24, r26
 b90:	00 0c       	add	r0, r0
 b92:	08 95       	ret

00000b94 <__udivmodhi4>:
 b94:	aa 1b       	sub	r26, r26
 b96:	bb 1b       	sub	r27, r27
 b98:	51 e1       	ldi	r21, 0x11	; 17
 b9a:	07 c0       	rjmp	.+14     	; 0xbaa <__udivmodhi4_ep>

00000b9c <__udivmodhi4_loop>:
 b9c:	aa 1f       	adc	r26, r26
 b9e:	bb 1f       	adc	r27, r27
 ba0:	a6 17       	cp	r26, r22
 ba2:	b7 07       	cpc	r27, r23
 ba4:	10 f0       	brcs	.+4      	; 0xbaa <__udivmodhi4_ep>
 ba6:	a6 1b       	sub	r26, r22
 ba8:	b7 0b       	sbc	r27, r23

00000baa <__udivmodhi4_ep>:
 baa:	88 1f       	adc	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	5a 95       	dec	r21
 bb0:	a9 f7       	brne	.-22     	; 0xb9c <__udivmodhi4_loop>
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	bc 01       	movw	r22, r24
 bb8:	cd 01       	movw	r24, r26
 bba:	08 95       	ret

00000bbc <__umulhisi3>:
 bbc:	a2 9f       	mul	r26, r18
 bbe:	b0 01       	movw	r22, r0
 bc0:	b3 9f       	mul	r27, r19
 bc2:	c0 01       	movw	r24, r0
 bc4:	a3 9f       	mul	r26, r19
 bc6:	70 0d       	add	r23, r0
 bc8:	81 1d       	adc	r24, r1
 bca:	11 24       	eor	r1, r1
 bcc:	91 1d       	adc	r25, r1
 bce:	b2 9f       	mul	r27, r18
 bd0:	70 0d       	add	r23, r0
 bd2:	81 1d       	adc	r24, r1
 bd4:	11 24       	eor	r1, r1
 bd6:	91 1d       	adc	r25, r1
 bd8:	08 95       	ret

00000bda <_exit>:
 bda:	f8 94       	cli

00000bdc <__stop_program>:
 bdc:	ff cf       	rjmp	.-2      	; 0xbdc <__stop_program>
